---
layout: post
title: "자잘한 도움말 #18 Git에 강제 푸시 기능이 존재하는 이유"
description: ""
date: 2024-07-15 15:30:00 +0900
categories: [Micro]

id: 18
slug: 
tags: []
---

## TL;DR

- `git push --force`에 대해
  - 강제 푸시 옵션은 위험하다고들 하는데 그럼 왜 존재하는가?
- 강제 푸시는 다음과 같은 상황에 유용하다.
  - 이미 푸시된 커밋을 수정할 때
  - 로컬에서 진행한 리베이스를 원격에도 반영할 때
- 어찌됐든 위험한 명령어인 만큼 안전하게 사용하자.
  - 기본적으로 혼자 사용하는 브랜치에서만 사용하자.
  - `--force` 대신 `--force-with-lease` 옵션을 사용하자.
    - 이 옵션은 강제 푸시를 적용하되 다른 사용자의 커밋 내역이 발견되는 경우 푸시를 하지 않는다.
- GUI 클라이언트를 사용한다면 내부적으로 무슨 옵션을 사용 중인지 한 번 확인해보자
  - [Fork 클라이언트](https://git-fork.com/)는 내부적으로 `--force-with-lease` 옵션을 쓰고 있다

## 이하 그리 중요하진 않은 내용들

형상 관리(Configuration Management)란 소프트웨어의 변경사항을 체계적으로 추적하고 통제하는 소프트웨어 공학의 절차를 뜻한다. 그 자체로 컴퓨터공학 논문 소재가 될 수도 있는 방대한 분야로 알고 있지만, 굳이 그렇게까지 잘 알진 못하더라도 이미 다들 그 개념을 실생활에서 접해 왔을 것이다. 형상 관리 도구의 발전사가 다음과 같기 때문: CVS와 SVN 등을 거쳐, 그 유명한 **Git**의 등장.

![Git](https://i.postimg.cc/BQKqV6fj/image.png)  
{: .rounded-edge-16 .center}

어릴 땐 Git과 Github를 놓고 구분짓지 못하던 시절도 있었지만, 지금은 Git이 없는 삶을 상상할 수 없는 수준 까진 왔다. 그만큼 개발자의 절친 같은 도구가 Git이다. 다만 이렇게 일상적으로 쓰고 있기는 해도 원체 사용법이 다양하고 복잡한 도구이기 때문에 "Git을 잘 안다"라는 표현 까진 쉽사리 입 밖으로 나오진 않는다. 친한데 가끔 어색하기도 한 그런 친구. 심지어 나는 CLI도 아니고 거진 GUI로만 그 기능을 쓰는 편이라구.  

아무튼 이걸 가지고 파헤쳐보는 시간을 언젠간 가져야겠지만, 오늘은 방대한 형상 관리와 Git의 세계 그 중 극히 일부분에 대해서만 다뤄보자. 전부터 해왔던 엉뚱한 생각이 하나 있거든.

### 모두의 Git

![svnvsgit](https://i.postimg.cc/Lshkp0KX/image.png)  
{: .rounded-edge-16 .center}

형상 관리 도구는 크게 두 방식으로 나눠진다고 한다. 중앙 집중형 방식과 분산 저장소 방식. 중앙 집중형 방식에선 개발자가 코드 저장소에 직접 찾아가 개발을 진행한다. 분산 저장소 방식에선 개발자가 자기 PC에 코드 저장소를 통째로 복제해 개발을 진행한다. Git이 바로 분산 저장소 방식의 형상 관리 도구이다. 우리가 Git을 통해 프로젝트 개발에 참여하려면, 먼저 `git clone` 명령어를 사용해 PC에 저장소를 복제해야 한다.

형상 관리에서 변경을 나타나는 단위를 커밋(Commit)이라고 부른다. 중앙 집중형 방식에서는 개발자의 커밋이 즉시 중앙 코드 저장소, 다시말해 프로젝트 전체의 변경으로 반영 된다. 반대로 분산 저장소 방식에서는 개발자의 커밋이 그 개발자의 PC 안에 복제된 로컬 저장소에만 머무른다.

![push and pull](https://i.postimg.cc/MpKXpXps/image.png)  
{: .rounded-edge-16 .center}

따라서 분산형 방식에서는 저장소를 동기화 하는 작업이 추가로 필요하다. 변경이 발생한 저장소는 커밋들을 묶어 다른 저장소에 변경사항을 밀어 넣어야 하고(**푸시, Push**), 다른 저장소들은 그 변경사항을 당겨와야 한다(**풀, Pull**). 물론 일반적으로 아무 저장소끼리 푸시와 풀을 주고받진 않고, 중심이 될 원격 저장소를 기준으로 푸시와 풀이 오가게 된다. 약간 사담이지만 이 원격 저장소 호스팅 서비스로 대박 난게 바로 [Github](https://github.com/){:target="_blank"}.

![conflict](https://i.postimg.cc/vHbgjbCv/image.png)  
{: .center .w-half}

아무튼, 간단하게 설명 했지만 사실 그 푸시와 풀은 필연적으로 여러 갈등(**Conflict**)을 야기하는 작업이다. 변경 사항을 원격 저장소에 푸시 했더니 이미 다른 로컬 저장소의 변경 사항이 적용되어 있는 상황이고 심지어 그 변경사항이 내가 추가한 부분과 충돌을 발생시킨다면?  

따라서 푸시는 무작정 덮어쓰기 방식으로 진행되지 않는다. Git은 충돌이 발생한 부분이 해결(**Resolve**)되어야지만 성공적으로 푸시가 완료되는 구조이며, 푸시 이전에 원격 저장소 측에 "제가 지금 푸시 하려고 하니 풀좀 받아주세요" 하는 요청, 즉 풀 리퀘스트(**Pull Request**)를 먼저 작성하는 것이 Git을 통한 협업의 일반적인 흐름이다.

### 강제 푸시

![big red button](https://i.postimg.cc/pTLXTbcz/image.png)  

원격 저장소의 상태를 신경쓰지 않는 푸시 (덮어쓰기)

![rebase-push](https://i.postimg.cc/RZWJkZmz/image.png)
이런 경우는 그냥 푸시가 안됨.

개인적으로 GUI가 제공해주는 amend 기능을 자주 쓴다.
커밋 해놓고 보니 아 이거 깜빡했네 하는 일이 많아서
그 때 만약 그 커밋이 원격에까지 푸시가 된 상태였다면 force 옵션을 주로 사용

  - 기본적으로 혼자 사용하는 브랜치에서만 사용하자.


### 조금 더 안전한 강제 푸시

  - `--force` 대신 `--force-with-lease` 옵션을 사용하자.
    - 이 옵션은 강제 푸시를 적용하되 다른 사용자의 커밋 내역이 발견되는 경우 푸시를 하지 않는다.


![git fork는 합니다](https://i.postimg.cc/XvmcJNdw/image.png)

Git Push Force-With-Lease
git push --force-with-lease is a safer alternative to git push --force. It allows you to push changes to the remote branch only if the remote branch is at the same commit as the one you have locally. If the remote branch has been updated by someone else, the push will be rejected, preventing accidental overwrites.

## 내가 배운 것

- 형상 관리 도구에 대해 다시 한 번 생각해보는 계기

---

- git force push는 언제 쓰나?
    - 강제 푸쉬가 위험한 기능이라면 애초에 왜 존재하는가?
    - Whenever you are the only one working on a branch (or on a repo, in
    the case of a fork), you can force push.
    - https://stackoverflow.com/questions/34995726/why-when-should-one-ever-force-push
    - 관련 질문과 답변은 많은 편
    - 공학적인 글이라기보단, 에세이에 가까운 주제


---

refs.
https://www.freecodecamp.org/korean/news/git-push-to-remote-branch/
https://velog.io/@rawoon/-force-%EB%8A%94-%EC%9C%84%ED%97%98%ED%95%98%EB%8B%88-git%EC%9D%98-force-with-lease-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90
https://safjan.com/understanding-the-differences-between-git-push-force-and-git-push-force-with-lease/#git-push-force-with-lease

https://elky84.github.io/2020/07/19/git_vs_svn/
게임 개발에서 SVN을 사용하는 이유 (조금 된 글이지만)  
중앙 집중형 방식의 형상 관리와 대비되는 분산형 형상 관리 시스템으로서의 Git


그냥 흘러흘러 가다 찾은 진짜 재밌는 글  
(주제랑 직접적인 관련은 없음)
https://sangminpark.blog/2013/04/22/%ec%98%a4%ed%94%88%ec%86%8c%ec%8a%a4%ec%9d%98-%ec%8a%b9%eb%a6%ac/