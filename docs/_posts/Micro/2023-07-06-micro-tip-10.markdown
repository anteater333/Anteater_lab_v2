---
layout: post
title: "자잘한 도움말 #10 TypeError: (...).default is not a constructor"
subtitle: TypeScript 코드를 컴파일해서 실행했더니 어떤 라이브러리가 자기는 생성자가 아니라고 할 때
description: "TypeError: jszip_1.default is not a constructor, esModuleInterop, javascript, typescript, module export, module import, node, 자바스크립트 모듈, 생성자, 에러"
date: 2023-07-18 23:46:00 +0900
categories: [Micro]
---

⚠️ 작성후 파일명 + 시간 바꿔! (tip 9 시간 안바꿔놨다. 이제와서 바꾸면 GSC 관련해서 문제 생길듯.)

## TL;DR

![오늘의문제](https://i.postimg.cc/6Qb0jyq9/image.png)   
{: .center .w-3-quarter .mb-lg}

- ```typescript
import JSZip from 'jszip';
  ```
  TypeScript에서 위처럼 모듈을 불러왔는데 실행 시 다음과 같은 에러가 나타난다면.
  ```
TypeError: jszip_1.default is not a constructor
  ```
- `tsconfig.json` 파일에서 `"esModuleInterop"`의 값을 `true`로 수정한다.
- 해당 값을 수정할 수 없다면 import를 다음과 같이 수정한다.
  ```typescript
import JSZip = require("jszip");
  ```


## 이하 그리 중요하진 않은 내용들

언제나 그렇듯이 문제 해결을 위해서라면 아래 글은 전혀 읽을 필요가 없다. 사실 처음 이 에러를 겪었을 땐 없었던 걸로 기억하는데 지금 와서 문제를 재현하니까 vscode가 손수 어떻게 하면 된다고 알려주더라고. 아무튼 얼마나 궁금해할지는 모르겠으나 나는 궁금해서 주제로 정해봤다.

### TypeScript와 JavaScript의 관계

![the cooler script](https://i.postimg.cc/cLMytPZN/cooler-Daniel.webp){:loading="lazy"}  
{: .center .w-3-quarter}

**타입스크립트는 자바스크립트의 슈퍼셋이다**. 우리말로는 상위집합이라고 한다. 부분집합의 반대말. 하지만 "자바스크립트는 타입스크립의 서브셋이다"라고는 흔히 말하지 않는다. 태초에 자바스크립트가 먼저 존재했고, 그것을 보완하기 위해 만든 것이 타입스크립트이기 때문.

자바스크립트는 약타입 언어로 설계되었다. 런타임 동안 데이터의 타입을 보장해주지 않는다. `1 + 1`을 입력했더니 `11`을 반환받는 경험을 한번쯤 해봤을 것이다. 코드를 작성할 때 이 변수가 `number`인지, `string`인지 따로 선언하지도 않는다. 이런 특성이 어느 정도 이점은 있었겠지만 개발자들 사이에서 적잖은 불편함을 불러일으켰고, 그들은 자바스크립트에 타입 시스템을 추가해 **타입**스크립트(**Type**Script)를 개발하게 된다.

![ts2js](https://i.postimg.cc/XYGVKkKx/tstjs.png){:loading="lazy"}  
{: .center .w-3-quarter}

개인적으로 흥미롭다고 생각하는 부분은, 타입스크립트가 자바스크립트를 완전히 대체하는 방식을 택하지 않고 자바스크립트를 보완하는 방식을 택했다는 점이다. 타입스크립트에는 "타입스크립트 엔진"이라는 물건이 따로 존재하지 않는다. 타입스크립트 코드를 실행하려면 그것을 자바스크립트 코드로 먼저 바꿔야 한다. 달리 말해서, 타입스크립트를 컴파일하면 그 결과로 자바스크립트 코드가 나오게 된다.

### 모듈화 문제

> [자바스크립트 프로그램은 꽤 작게 시작되었습니다.](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules)

자바스크립트는 웹 페이지 제어라는 작은 목적만을 가지고 시작되었다. 자바스크립트가 단 10일 만에 완성된 프로젝트라는 이야기는 유명하다. 그런데 왠걸 21세기 웹은 덜컥 엄청난 성공을 거두어 버렸고, 2023년 현재 사람들은 이 자바스크립트를 가지고 머신 러닝 라이브러리까지 사용하고 있다.

![webpack, module bundler](https://i.postimg.cc/fR4vsbNs/image.png){:loading="lazy"}  
Webpack
{: .center .rounded-edge-16}

현대적인 웹 개발 프로젝트라면 저마다 하나씩 모듈 번들러(Module bundler)를 가지고 있을 것이다. 나도 관성적으로 번들러를 포함해서 여러 프로젝트를 진행해오고 있다. 모듈 번들러에 대해서 핵심만 설명하자면 여러 자바스크립트 모듈들을 한데 모아 묶음 처리 해주는 도구이다. 이런 기능이 왜 필요하느냐, 초기 자바스크립트와 웹 브라우저는 굳이 모듈에 대한 고려를 하지 않았기 때문.
## 내가 배운 것

