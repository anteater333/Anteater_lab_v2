---
layout: post
title: "자잘한 도움말 #15 프로젝트 별로 필요한 Node.js 버전이 다를 때"
subtitle: "작업 디렉토리가 바뀔 때 마다 자동으로 Node.js 버전을 바꾸는 방법"
description: ""
date: 2024-04-07 17:40:00 +0900
categories: [Micro]
---

## TL;DR

- 



---

## 이하 그리 중요하진 않은 내용들

![일 많은 백수](https://i.postimg.cc/XqQQgQW3/temp-Image-PLY8-Np.avif)  
이상하다.. 나 백수인데..
{: .center .w-1-quarter .rounded-edge-16}

아무래도 나는 Node.js와는 떼려야 뗄 수 없는 사이가 되어버린 것 같다. 요즘 웹 프론트엔드 개발 하려면 거의 대부분은 일단 Node.js 기반으로 프로젝트를 생성해야 하니깐. 나는 지금까지 여러 프로젝트를 진행해왔는데, 그 중에는 올해 초에 코드 작성을 시작한 것도 있고 몇 년 전에 시작되어서 아직까지 운영되며 내 재정을 책임지는 서비스도 있다. 이렇듯 개발 PC에는 여러 프로젝트들이 공존할 수가 있다. 여기서 문제는 그 몇 년 전 프로젝트가 조금 까다로운 면이 있어서, 오래된 Node.js 버전을 요구한다는 점이다.

왠만하면 새로운 프로젝트에서는 최신 Node.js 버전을 쓰고 싶은데 옛날 프로젝트에 발목 잡히긴 싫어. [옛날 Node.js엔 `structuredClone()`도 없단 말야.](/micro/2023/12/10/micro-tip-13.html#tmi){:target="_blank"} 그럴 때 필요한 것이 이번 글이다. Node.js 버전을 관리하는 방법에 대해 알아보자.

### Node Version Manager

![nodejs install](https://i.postimg.cc/g2J3ZGxn/image.png)  
{: .center}

Node.js를 설치 하려면 어떻게 해야할까. 구글에 Node.js 설치 방법을 검색하면 Node.js 공식 사이트가 가장 먼저 노출된다. [공식 사이트의 다운로드 페이지](https://nodejs.org/en/download){:target="_blank"}에 들어가 OS에 맞는 최신 버전 인스톨러를 다운 받아 실행하면 설치 끝. 인스톨러가 환경 변수도 알아서 등록해줄거고, 별 문제 없이 쉘에서 `node` 명령어를 사용할 수 있게 된다. 특정 버전의 Node.js 하나만 설치하고자 한다면 이렇게 하면 된다. 하지만 앞서 말했듯이 지금 우리는 여러 Node.js 버전이 필요하다. 그냥 다른 버전의 인스톨러를 새로 설치하면 환경변수가 꼬인다거나 하지 않을까? 이런 문제를 해결하기 위해선 내 PC에 설치된 Node.js의 버전을 관리해주는 별도의 프로그램이 필요하다. 그렇게 특정 도구의 버전을 관리해주는 프로그램을 **버전 매니저(Version Manager)**라고 부른다. Node.js에서 가장 대표적인 버전 매니저가 바로 **Node Version Manager, NVM**이다.

![NVM](https://i.postimg.cc/cLKwhY3f/nvm-logo-color.png)  
{: .center}

NVM은 2010년 [Tim Caswell](https://twitter.com/creationix){:target="_blank"}에 의해 시작되어 현재는 Node.js에서 사실상 공식 취급을 받는 도구가 되었다. 아닌게 아니라, 아까 말했던 공식 사이트 다운로드 페이지에서도 직접 [NVM 사용해 Node.js를 설치하는 방법](https://nodejs.org/en/download/package-manager){:target="_blank"}을 알려주고 있다.

```bash
# Linux/Mac 기준

# installs NVM (Node Version Manager)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

# download and install Node.js
nvm install 20

# verifies the right Node.js version is in the environment
node -v # should print `v20.12.2`

# verifies the right NPM version is in the environment
npm -v # should print `10.5.0`
```

`curl`로 NVM을 설치한 다음 `nvm install 20` 명령어 한 줄이면 Node.js 20 버전이 설치된다. 자세한 사용법은 [NVM 리포지토리의 README](https://github.com/nvm-sh/nvm?tab=readme-ov-file#usage){:target="_blank"}에서 확인할 수 있다. 주로 사용하게될 명령어는 다음과 같을 것이다:

```bash
# 설치 가능한 node 버전을 확인
nvm ls-remote

# 최신 버전 node를 설치
nvm install node

# 구체적인 버전의 node를 설치
nvm install 14.7.0

# 이 PC에서 특정 버전의 node를 사용하도록 설정
nvm use 14.7.0

node -v # should print `v14.7.0`
```

참 쉽죠?


### `.nvmrc`

이제 내 개발 PC에 여러 버전의 Node.js를 설치하는 문제는 해결됐다. 하지만 아직 문제가 남아있다. 예를 들어, 어제는 Node.js 최신 버전을 사용해 신규 프로젝트 A를 개발했는데 오늘은 5년 전에 개발한 웹 서비스 B를 유지보수 해야 한다고 생각해보자. NVM을 사용해 Node.js를 과거 버전으로 설정해야 하는데, 그 과거 버전이 정확하게 몇 버전인지 알 수 있어야 한다. 혹시 모르지 14 버전은 너무 오래되서 안되고, 20 버전은 너무 최신이라 안될지. 심지어 극단적인 사례로 v16.16.0에선 되고 v16.20.0에선 안될수도 있다. **정말 그런 사례가 있는진 모르니까 너무 깊게 파고들진 말자.**{: .small} 이를 해결하기 위해서 우리는 프로젝트의 루트 디렉토리에 `.nvmrc`라는 파일을 만들어 이 프로젝트가 어떤 버전의 Node.js를 사용해야 하는지 명시해줄 수 있다.

```
v16.16.0
```

아무런 미사여구도 필요 없이 이 한 줄이면 `.nvmrc` 파일 끝. `v`는 붙여도 되고 안붙여도 된다. 그리고 `>=18.16.0` 같은 형식으로 사용 가능한 버전의 범위를 지정할 수 있는지 물어보는 의견도 찾아볼 수 있었는데, [버전 매니저의 목적에 맞지 않다고 판단해서 지원하지 않는다는 것 같다.](https://github.com/nvm-sh/nvm/issues/3167#issuecomment-1685397284){:target="_blank"}

아무튼, 아무 폴더 하나에 `.nvmrc` 파일을 만들어보자. 그런 다음 해당 경로에서 `nvm use`를 입력하면 NVM은 알아서 `.nvmrc` 파일을 읽고 Node.js의 버전을 변경해준다. 이렇게 우리는 프로젝트 별로 필요한 Node.js 버전이 다를 때 그 버전을 명시하고 관리하는 문제를 해결했다.

### 작업 디렉토리가 바뀔 때 마다 자동으로 Node.js 버전 바꾸기

`.nvmrc` 파일이 있는 경로에서 `nvm use` 명령어를 입력하면 Node.js 버전이 바뀐다. 이 행위가 정말 쉽고 간단하고, **까먹기 좋다**. 자고로 개발자라면 이렇게 번거로운 반복 작업은 가만 둘수 없어야지. [스택 오버플로우에서 200개 이상의 upvote를 받은 이 글을 참고하자.](https://stackoverflow.com/questions/23556330/run-nvm-use-automatically-every-time-theres-a-nvmrc-file-on-the-directory){:target="_blank"}

```sh
# ~/.zshrc
# nvm config
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc
```

```sh
# ~/.bashrc
_nvmrc_hook() {
  if [[ $PWD == $PREV_PWD ]]; then
    return
  fi
  
  PREV_PWD=$PWD
  [[ -f ".nvmrc" ]] && nvm use
}

if ! [[ "${PROMPT_COMMAND:-}" =~ _nvmrc_hook ]]; then
  PROMPT_COMMAND="_nvmrc_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi
```

본인이 사용하는 쉘 환경에 맞춰 위 스크립트를 각자의 .(~)shrc(Run Commands 파일) 파일에 추가해주자. 쉘 터미널을 재실행한 다음 `.nvmrc`가 있는 폴더로 이동하면 자동으로 `nvm use`가 실행되는 것을 볼 수 있다.


### New Challenger

Shell Setup

Environment variables need to be setup before you can start using fnm. This is done by evaluating the output of fnm env. To automatically run fnm use when a directory contains a .node-version or .nvmrc file, add the --use-on-cd option to your shell setup.

Adding a .node-version to your project is as simple as:

npm에서 yarn.. cra에서 vite.. nvm에서 fnm..

auto completion 추가하기 (글 내용 보고 넣을지 말지 판단하기)
```
mkdir -p ~/.config/zsh/completions

touch ~/.config/zsh/completions/_fnm

fnm completions --shell=zsh > ~/.config/zsh/completions/_fnm
```
```
fpath+=~/.config/zsh/completions/_fnm
autoload -Uz compinit
compinit
```

yarn이 사라졌어!

## 내가 배운 것

---

- 레퍼런스
- https://velog.io/@korany-lee/자동으로-nvm-use-해주는-script
- https://stackoverflow.com/questions/23556330/run-nvm-use-automatically-every-time-theres-a-nvmrc-file-on-the-directory

- 상당히 좋은 자료 - nvm vs fnm vs volta
https://pozafly.github.io/node/node-version-manager/


- 개발 경력이 쌓이다보니까 PC에 여러 node 버전이 산재하는구만
- 노드 버전 매니저에 대해서 간략하게. 이건 다들 알죠?
- 프로젝트별로 node 버전 다르게하기
    - .nvmrc
    - nvm use 하면 바로 파일 읽어서 환경 변경됨
    - 문제는 프로젝트 워크스페이스 열때마다 저래줘야함.
    - 위 zsh 버전 스크립트를 참고하자.


윈도우 사용자를 위해
https://coldpresso.tistory.com/34