---
layout: post
title: '회고록 #3 - 도마도 (1)'
date: 2024-03-09 00:00:00 +0900
description: ""
categories: [Memoir]
---

[독후감 카테고리](/category/4.Reddit.html){: .a-not-colored}는 방치된 지 벌써 2년에 가까워지고 있는 반면 만들어진지 얼마나 됐다고 회고록 카테고리에는 프로젝트 하나를 더 들이고 있다. 공부보단 일단 뭐든 만들고 보길 선호하는 성격을 가져서 그런가. 아무튼, 요즘 다시 구직활동에 전념할 시기가 찾아온 탓에 나 자신을 되돌아보는 순간이 잦아지긴 했다. 그 덕분에 사람이 너무 우울해하고 있더라. '지난 몇년간 뭐 했지...' 이런 부정적인 기운을 한 번 찍어눌러 볼 겸 이번 글은 활기차게 시작해 보자. 


## 도마도(domado) - 뽀모도로 타이머
{: .center .big}

[![도마도](https://raw.githubusercontent.com/anteater333/domado/main/docs/screen.png){:loading="lazy"}  
도마도 뽀모도로 타이머](https://domado.vercel.app/)
{: .center .rounded-edge-16}

자, 오늘 소개할 제품은 바로 웹에서 동작하는 간단한 뽀모도로 타이머, 이름하여 **도마도**입니다!

### 뽀모도로 타이머

작년 하반기쯤부터 집중력이 많이 떨어졌단 생각이 들어 **뽀모도로 타이머**라는 물건을 사용하고 있었다. 25분 집중, 5분 휴식, 반복하다가 15분 긴 휴식. 뽀모도로라는게 사실 크게 복잡한 규칙이 없는 방법론이라서 만들기가 크게 어렵지 않다. 인터넷에 검색을 조금만 해도 각종 어플리케이션과 웹 사이트가 제공되고 있단 걸 알 수 있다. 마침 이렇게 회고록을 쓰는 김에 검색을 좀 해봤는데, [pomofocus](https://pomofocus.io/){:target="_blank"}란 사이트가 여러모로 내가 만든 서비스랑 비슷하군.

아니 이제와서 비슷한 사이트가 이미 있다는 말이 무엇이냐, 사실 이 프로젝트 자체가 아주 가벼운 마인드로 시작했다는 반증이다. **[도마도](https://domado.vercel.app){:target="_blank"}**는 웹 어플리케이션 형태로 구현한 뽀모도로 타이머다. 뽀모도로, 짧은 휴식, 긴 휴식 세 가지 형태의 타이머를 제공해준다. 어... 더 설명할 기능은 딱히 없다. 이 프로젝트를 시작한 이유는, 앞서 원래 내가 쓰고 있다고 말했던 뽀모도로 타이머 어플리케이션이 갑자기 나에게 돈을 요구했기 때문이다. 이렇게 말하니까 뭔가 위험한 어플리케이션을 사용한 것 처럼 들리는데, 사실 그 어플리케이션은 구독 형태로 사용하는 서비스였고, 나는 그 체험판을 쓰고 있었던 것이었다.

![구두쇠](https://i.postimg.cc/zfRvcMF9/Ez-Ev-Im-UUAAHj9-P.jpg){:loading="lazy"}  
헛돈 나가는건 절대 안되지
{: .center .rounded-edge-16}
이런 간단한 서비스에 내 돈을 줄 순 없다. 차라리 직접 만들고 말지! 이것이 그 역사적인 도마도 뽀모도로 타이머의 시작이었다...

나는 이 프로젝트를 작년 12월 말에 시작해서 올해 3월 초까지 진행했다. 사실 그냥 혼자 만족하면서 쓸 수 있는 수준은 이미 예전에 도달했는데, 계속 이것저것 기능들을 덧붙이고 버그들을 수정하다보니 어느덧 3달이나 지나 있더라. 그리고 지금은 개발을 조금 멈춰둔 상태지만**(취직 해야지 취직)**{: .small} 아직도 계속 개발을 하려면 할 수 있는 상태라고 보고있다. 어떻게 보면 참 기구하군, 만약 구독 형태의 어플이 아니라 다른 무료 서비스를 이용했다면 이런걸 만들어봐야겠단 생각조차 없었을 지도 모르는 일인데. 아무튼, 워낙 기능적으로는 소개할게 없는 서비스다보니 이렇게 사담을 길게 섞어서 시작했다.

### 도마도의 탄생

궁상 그만 떨고 프로젝트 기획에 대해서 더 말해보자. 디자인이 꽤 이쁘게 나왔습니다. 이공계 출신 프로그래머의 디자인 감각이라곤 도저히 상상조차 못할 색상 감각.

![뽀모도로 타이머(찐)](https://i.postimg.cc/qBnhcFpx/temp-Image1b-PW19.avif){:loading="lazy"}  
{: .center .rounded-edge-16 .w-half}

뽀모도로(pomodoro)는 이탈리아 사람이 만들었는데, 이탈리아어로 토마토를 뜻한다. 그래서 인터넷에 검색하면 위 사진과 같은 타이머를 찾아볼 수 있다. 일종의 아이디어 상품. 나는 처음 프로젝트를 떠올렸을 때 머릿속에 함께 그려진 이 토마토 모양 타이머를 그대로 디자인에 채용했다.

![원시고대 도마도](https://i.postimg.cc/jd1kPCc1/image.png){:loading="lazy"}  
이렇게
{: .center .rounded-edge-16 .w-3-quarter}

도마도는 3가지 종류의 타이머를 제공해야 한다. 제일 중요한 집중 시간에 사용할 **빨간색**{:style="color:#f14d30"} 뽀모도로 타이머와 함께, 짧은 휴식과 긴 휴식을 나타내는 타이머도 필요하다. 나는 이를 표현하기 위해 색상 2개를 더 추가했다. 짧은 휴식을 나타내는 색상은 토마토 꼭지에서 가져와 **초록색**{:style="color:#2e922c"}으로, 긴 휴식을 나타내는 색상은 나가서 좀 걷고 오라는 뜻에서 **하늘색**{:style="color:#54d7ff"}으로.

## Drafts

![브랜치 전략](https://i.postimg.cc/vHbxw7Q2/temp-Image-DEgn-O8.avif){:loading="lazy"}  
{: .center .rounded-edge-16}

아무튼 다시 개발 블로그의 마인드로 돌아오자. 나는 이번 프로젝트를 진행하면서 개발 기간을 "드래프트(Draft)"라는 단위로 나누어 관리했다. 드래프트를 시작하기 전에 먼저 어떤 기능들을 만들지 기획하고 그림을 그려본다. 그렇게 도출한 기능들을 기반으로 이슈를 생성하고 개발을 진행하면서 그 이슈들을 하나씩 제거한다. 모든 이슈가 제거되면 드래프트 끝. 꼭 드래프트가 끝나지 않았더라도 어느정도 기능이 해당 드래프트의 dev 브랜치에 쌓이면 main 브랜치에 병합해 배포도 틈틈이 진행한다. 그렇게 운영하다 발생하는 버그들은 dev 브랜치에서 바로 hotfix를 진행하고 병합한다.

프로젝트의 개발 흐름은 이렇게 진행됐다. 드래프트라는 단어에 대해 밑그림이 차곡차곡 쌓여서 완제품이 된다는 의미라고 좋게 해석할 수 있는데, 사실 그냥 관성적으로 선택한 단어다. 뒤늦게 실제 사용례를 찾아봤는데 조금 안어울리는 측면이 있어서 민망하군. 그냥 개발 기간이라고 하지 뭘 또 저렇게. 아무튼, 약 3개월 동안 프로젝트를 진행하면서 드래프트는 총 2회가 있었고, 이번 글에서 그 두 번의 개발 기간을 모두 회고해볼 생각이다.

### 첫 번째 Draft

첫 번째 드래프트의 목표는 프로토타이핑과 개발환경 세팅. 특히 여기서 집중해보고 싶은 내용은 개발환경과 관련된 내용들이다. 개인 프로젝트를 꾸준히 진행해오면서 항상 제자리걸음이 아닌 이전보다 한 걸음이라도 더 나아가는 것을 목표로 삼고 있다. 도마도의 경우 기능 그 자체에는 구현에 큰 어려움이 없을 것으로 예상되었기 때문에 나는 시도해보지 않았던 개발환경을 적극적으로 도입해보기로 했다.

![채신기술](https://i.postimg.cc/ydQ370VC/temp-Image-Fu-Gz-PX.avif){:loading="lazy"}  
{: .center .rounded-edge-16}

**npm 대신 yarn**  
특히 yarn berry, 예전부터 `node_moduels/` 디렉토리에 대한 감정이 좋지 못했기 때문에 yarn berry를 도입했다. 패키지를 압축된 상태로 설치하고 그 패키지들을 저장소에 직접 푸시한다는 아이디어가 새로웠다. 다만 한 가지 애로사항은 있다. 일단 vscode에 yarn 환경이 바로 적용 되지 않는 문제가 있는데, `yarn dlx @yarnpkg/sdks vscode` 명령어를 입력하면 쉽게 해결된다. 그런데 개발 중 맥북을 새로 구매하게 되어 맥북에서 새로 개발 환경을 세팅했는데 해당 명령어가 `.yarn/sdks/` 폴더에 새로운 커밋을 발생시키더라. 그 변경사항을 저장소에 푸시한 다음 다시 WSL 환경에서 같은 명령어를 입력하면 동일한 커밋이 다시 발생한다. 협업 시 고려가 필요한 사항.

**Redux 대신 Recoil**  
상태 관리 라이브러리에 대한 경험이 많지는 않지만 그래도 쓸 일이 있으면 Redux(같은 Flux 기반 상태 관리 라이브러리라는 점에서 Vuex도 포함)를 주로 사용해오고 있었다. 다만 Redux를 지금까지 몇 번 써왔음에도 그 구조가 머릿속에 잘 그려지지 않는다. 괜히 러닝 커브가 단점으로 꼽히는게 아니야. 그래서 이번에 Recoil을 새로 도입하게 되었는데, 확실히 쉽긴 하더라. 좀 더 React스러운 면이 있달까. Recoil 상태를 사용하는 방법도 `useState` 와 그 형태가 비슷한 면이 있어 쉽게 배우고 쉽게 사용할 수 있었던 것 같다.  
처음 Recoil Atom들을 구현하면서 그 상태의 형태들을 어떻게 설정해야 할지 고민했던 기억이 난다. 여러 상태값들이 타이머를 위해 필요하게 될텐데, 이를 하나의 큰 Object atom으로 관리해야 하느냐, 분리된 많은 원시 타입 atom으로 관리해야 하느냐였다. 내 판단은 많은 원시 타입 atom들로 관리하는 방법. 상태 간의 의존성 생기는 것이 좋지 않아 보이더라.

개발 환경 세팅에는 [이 자료](https://velog.io/@beforesol/Yarn-berry-Vite-React-Typescript-recoil-환경-설정){:target="_blank"}를 많이 참고했다. 때마침 내가 선택한 도구들을 다 묶어서 설명해주시더라구.

### 두 번째 Draft

! 프로젝트 소개

! 개발범위(1st Draft와 2nd Draft 묶어서 작성)

2nd Draft의 범위 - 본격적으로 어디가서 보일 수 있을법한 수준으로. 모바일 기기 지원 + 긍정적으로 바라봐준 친구의 피드백 적용(사용성 높이기). PWA 기반 기술들 적용 (기기 제어, 알림, 백그라운드 환경 지원).

- 모바일 환경 지원
    - [x]  Noti가 발생하지 않고 먹통이 되는 문제 (재현 필요)
    - [x]  반응형 웹 디자인
- 유일한 고객의 요청에 따른 사용성 개선
    - [x]  백그라운드 환경 지원
    - ~~포그라운드 중 알림 (난 뭔 소리를 적어놓은거냐?)~~
        - ~~아마 타이머 진행 시 째깍 째깍 소리를 내달라는 거 같기도 하고~~
        - ~~이거는 굳이… 다음으로 미뤄도 될 것 같은데…~~
    - [x]  시간 종료 시 알림 강화 (소리 등으로 확실하게 알리기)
    - [x]  타이머 자동 진행 옵션
    - [x]  현재 상태 넘기기 (이건 내가 필요해서 ㅎㅎ)
    - [x]  타이머 완료, 설정 저장 등 상황에서 toast UI 추가하기


----

! 개발 기간 활동별 평가

!! 개발 환경 세팅은 어땠나?

!! 1st Draft에서 구현한 핵심 기능들에 대해서는?

!! 사용성 개선과 PWA  

! 회고

!! Back to basic, 왜 웹이었습니까? (개발 기간 중 맞닥뜨린 도전과제)

백그라운드 지원을 2nd 드래프트에 호기롭게 포함시키고 어느정도 구현해낼 수 있었다고 생각했지만, 실제 모바일 디바이스에서 사용해본 결과 동작은 예상과 많이 달랐음.

서비스 워커와 웹 워커에 대한 고찰 필요.

방안1. 네이티브 어플리케이션으로 전환  
방안2. 푸시 서버의 도입(일개 타이머에겐 너무 비싼 컴포넌트)  

타이머라는 아이템 자체는 분명 네이티브 어플리케이션에 더 잘 어울리는 부분이 있음을 인정해야 함.

다만 뽀모도로 타이머라는 특성에 그런 동작들이 큰 짐이 될 것 같진 않다고 생각. 잘 포장하면 그렇게 설명할 수도 있겠지. 휴대폰에 뽀모도로 타이머를 켜 두세요. 웹 브라우저를 백그라운드로 보내버리면 타이머가 제대로 동작하지 않습니다. 집중할 시간엔 딴짓하지 맙시다. (농담, 그럼 긴 휴식 타이머 동안에도 휴대폰 못써?)

!! 기술 부채

현재 도마도 프로젝트는 아주 험악하게 컴포넌트화 되어있다. 3rd Draft는 전반적으로 리펙토링의 시간이 될 것 같음.

! 프로젝트 후기



좋은 반응과 디스콰이엇 이야기. 추천받았으나 아직 망설임이 심한 단계.

정말 쉬운 생각으로 시작한 프로젝트인데 생각보다 길게 붙잡고 있었음.

----

- 앞으로 작성할 때 지키면 좋을 가이드라인들:
  - 개인 노션에 작성한 개발일지를 참고
  - 프로젝트 소개 (프로젝트 별로 한번만)
  - 포스팅은 개발 기간 단위로 작성
  - 개발 기간 중 구현한 핵심 기능 소개
  - 기술 사용 이유
  - 개발 중 겪은 도전들
  - 이번 개발 기간 평가
  - 다음 개발 기간 계획은 개발일지에 작성하도록

